import * as ort from "onnxruntime-web";

export async function loadModel() {
    try {
        const session = await ort.InferenceSession.create("/model/densenet_model.onnx");
        console.log("‚úÖ ONNX model loaded in browser.");
        return session;
    } catch (error) {
        console.error("‚ùå Failed to load model:", error);
    }
}

export async function runModel(session, inputData) {
    try {
      if (!inputData || !Array.isArray(inputData)) {
        throw new Error("Invalid input data: inputData must be a valid array");
      }
  
      // ‚úÖ ‡πÉ‡∏ä‡πâ 3 channels (RGB) ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö shape
      if (inputData.length !== 3 * 224 * 224) {
        throw new Error("‚ùå Invalid input shape: Expected [1, 3, 224, 224]");
      }
  
      const tensorInput = new ort.Tensor("float32", new Float32Array(inputData), [1, 3, 224, 224]);
  
      // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô input name ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÄ‡∏ä‡πà‡∏ô input_1)
      const feeds = { input_1: tensorInput };
  
      // ‚úÖ ‡∏£‡∏±‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
      const results = await session.run(feeds);
      console.log("‚úÖ Model output keys:", Object.keys(results)); // üîç Debug
  
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ output key ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏≤
      const outputKey = Object.keys(results)[0]; // ‡∏î‡∏∂‡∏á key ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
      console.log("Output key:", outputKey);
      console.log("Model output data:", results[outputKey].data);
      if (!results[outputKey]) {
        throw new Error("‚ùå Model did not return expected output");
      }
  
      return results[outputKey].data; // ‚úÖ Return output data ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    } catch (error) {
      console.error("‚ùå Error running model:", error);
      return null;
    }
  }
  